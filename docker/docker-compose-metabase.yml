version: '3'
services:

  # Step 1. Use the following credentials _to login_ to metabase 
  #         user
  #         user@user.user
  #         useruser1

  # WARNING: _DO NOT_ use unsafe credentials in development/production env

  # Step 2. when _configuring_ new PostgreSQL connection in Metabase UI
  #         use drill's postgres credentials (see docker/.env file in https://github.com/Drill4J/realworld-java-and-js-coverage)

  metabase:
    # Metabase 
    #     version - metabase/metabase:v0.48.6
    #     digest  - metabase/metabase@sha256:96416c11371d400aecc2073b8d0e8335cc7c413b236ef724e51dda095b2580ea
    #     obtained by "docker inspect --format='{{index .RepoDigests 0}}' metabase/metabase:v0.48.6"
    # According to metabase docs API can break at any time even on the same version (somehow)
    #     see https://www.metabase.com/docs/latest/api-documentation 
    # Using digest to ensure no metabase API change
 
    image: metabase/metabase@sha256:96416c11371d400aecc2073b8d0e8335cc7c413b236ef724e51dda095b2580ea
    container_name: metabase
    hostname: metabase
    volumes:
      # Share urandom from host machine to speedup startup (only on Linux) (https://github.com/metabase/metabase/issues/10175, https://ruleoftech.com/2016/avoiding-jvm-delays-caused-by-random-number-generation)
      - /dev/urandom:/dev/random:ro
    ports:
      - 8095:3000
    environment:
      MB_DB_TYPE: postgres
      MB_DB_HOST: postgres-metabase
      MB_DB_PORT: 5432
      MB_DB_USER: ${POSTGRES_USER}
      MB_DB_PASS: ${POSTGRES_PASSWORD}
      MB_DB_DBNAME: ${POSTGRES_DB}
    networks:
      - drill4j-dev-network
    healthcheck:
      test: curl --fail -I http://localhost:3000/api/health || exit 1
      interval: 15s
      timeout: 5s
      retries: 5

  # A separate PostgreSQL instance for storing dashboards/tables/charts configuration
  postgres-metabase:
    image: postgres:14.1
    ports:
      - '5433:5432'
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./metabase-volumes/data.sql:/docker-entrypoint-initdb.d/data.sql
      # - ./metabase-volumes/pg:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - drill4j-dev-network
    command: ["postgres", "-c", "log_statement=all", "-c", "log_min_duration_statement=0"]

networks:
  drill4j-dev-network:
