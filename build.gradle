plugins {
    id 'java'
    id 'com.epam.drill.agent.runner.autotest' version '0.3.3'
}

group 'com.epam'
version '1.0-SNAPSHOT'

allprojects {

    repositories {
        mavenCentral()
    }

    dependencies {
        apply plugin: 'java'
        apply plugin: 'com.epam.drill.agent.runner.autotest'
        apply from: rootProject.projectDir.path + "/test2run.gradle"
        implementation 'io.rest-assured:rest-assured:4.3.3'
        implementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
        runtimeOnly 'org.junit.jupiter:junit-jupiter-engine'
        compile 'com.codeborne:selenide:5.19.0'
    }

    drill {
        version = "0.22.2"
        adminHost = "localhost"
        groupId = "realworld-app"
        adminPort = 8090
        additionalParams = [
            "devToolsProxyAddress": "localhost:8093",
            "withJsCoverage": true,
            "devtoolsAddressReplaceLocalhost": "host.docker.internal",
        ]
    }
}

// 0. clean up old files and register that task
tasks.register('cleanUpChromeFolders', Delete) {
    delete file('./chrome-binary'),
            file('./chrome-driver')
}
tasks.named("clean") {
    dependsOn('cleanUpChromeFolders')
}

// 1. create folders
tasks.register('prepareDirs') {
    mustRunAfter clean
    doFirst {
        mkdir "./chrome-binary/"
        mkdir "./chrome-driver/"
    }
}

// 2. download driver and binary
tasks.register('downloadChromeDriver', Exec) {
    dependsOn('prepareDirs')
    commandLine 'curl', '-L', '-o', './chrome-driver/chromedriver_win32.zip',
            'https://chromedriver.storage.googleapis.com/114.0.5735.90/chromedriver_win32.zip'
}
tasks.register('downloadChromeBinary', Exec) {
    dependsOn('prepareDirs')
    commandLine 'curl', '-L', '-o', './chrome-binary/chrome-win.zip',
            'https://www.googleapis.com/download/storage/v1/b/chromium-browser-snapshots/o/Win_x64%2F1148119%2Fchrome-win.zip?generation=1684876145913156&alt=media'
}

// 3. unzip files
def registerUnzipTask(taskName, src, dest) {
    tasks.register(taskName, Copy) {
        dependsOn('downloadChromeBinary', 'downloadChromeDriver')
        from zipTree(src)
        into dest
    }
}

registerUnzipTask('unzipChrome', './chrome-binary/chrome-win.zip', './chrome-binary/')
registerUnzipTask('unzipChromeDriver', './chrome-driver/chromedriver_win32.zip', './chrome-driver/')

// 4. delete zip files
tasks.register('cleanUp', Delete) {
    dependsOn('unzipChrome', 'unzipChromeDriver')
    delete './chrome-driver/chromedriver_win32.zip',
            './chrome-binary/chrome-win.zip'
}

// 5. register tasks
tasks.named('assemble') {
    dependsOn('prepareDirs', 'downloadChromeDriver', 'downloadChromeBinary', 'unzipChrome', 'unzipChromeDriver', 'cleanUp')
}